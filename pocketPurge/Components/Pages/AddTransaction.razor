@page "/add-transaction"
@using DataModel.Model
@inject IExpenseService ExpenseService
@inject NavigationManager NavigationManager
@using MudBlazor

<h1>Add Transaction</h1>

<div class="container">
    <div class="card mt-5">
        <div class="card-body">
            <form @onsubmit="HandleSubmit">
                <!-- Title -->
                <div class="mb-3 row">
                    <label for="title" class="col-sm-2 col-form-label">Title:</label>
                    <div class="col-sm-10">
                        <input type="text" id="title" class="form-control form-control-sm" @bind="Expense.title" required />
                    </div>
                </div>

                <!-- Type -->
                <div class="mb-3 row">
                    <label class="col-sm-2 col-form-label">Type:</label>
                    <div class="col-sm-10">
                        <button type="button"
                                class="btn btn-sm @(Expense.Type == "Debit" ? "btn-primary" : "btn-outline-primary")"
                                @onclick='() => SetType("Debit")'>
                            Debit
                        </button>
                        <button type="button"
                                class="btn btn-sm @(Expense.Type == "Credit" ? "btn-primary" : "btn-outline-primary")"
                                @onclick='() => SetType("Credit")'>
                            Credit
                        </button>
                    </div>
                </div>

                <!-- Category -->
                <div class="mb-3 row">
                    <label for="category" class="col-sm-2 col-form-label">Category:</label>
                    <div class="col-sm-10">
                        <select id="category" class="form-control form-control-sm" @bind="Expense.Category">
                            @foreach (var category in Categories)
                            {
                                <option value="@category">@category</option>
                            }
                            <option value="Custom">+ Add Custom Category</option>
                        </select>
                    </div>
                </div>

                <!-- Custom Category -->
                @if (Expense.Category == "Custom")
                {
                    <div class="mb-3 row">
                        <label for="customCategory" class="col-sm-2 col-form-label">Custom Category:</label>
                        <div class="col-sm-10">
                            <input type="text" id="customCategory" class="form-control form-control-sm"
                                   @bind="Expense.CustomCategory" placeholder="Enter custom category" required />
                            <button type="button" class="btn btn-sm btn-primary mt-2" @onclick="SaveCustomCategory">
                                Save Custom Category
                            </button>
                        </div>
                    </div>
                }

                <!-- Amount -->
                <div class="mb-3 row">
                    <label for="amount" class="col-sm-2 col-form-label">Amount:</label>
                    <div class="col-sm-10">
                        <input type="number" id="amount" class="form-control form-control-sm"
                               @bind="Expense.Amount" required min="0.01" step="0.01" />
                    </div>
                </div>

                <!-- Description -->
                <div class="mb-3 row">
                    <label for="description" class="col-sm-2 col-form-label">Description:</label>
                    <div class="col-sm-10">
                        <textarea id="description" class="form-control form-control-sm"
                                  @bind="Expense.Description" placeholder="Enter description"></textarea>
                    </div>
                </div>

                <!-- Error Message -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <!-- Submit Button -->
                <div class="mb-3 row">
                    <div class="col-sm-10 offset-sm-2">
                        <button type="submit" class="btn btn-success btn-sm">Add Transaction</button>
                    </div>
                </div>

                <!-- Back Button -->
                <div class="row">
                    <div class="col-sm-10 offset-sm-2">
                        <button type="button" class="btn btn-primary btn-sm" @onclick="NavigateDashboard">Back</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    private Expense Expense { get; set; } = new Expense();
    private string errorMessage { get; set; }

    // List of categories
    private List<string> Categories { get; set; } = new List<string>
    {
        "Food", "Drinks", "Clothes", "Gadgets", "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    private async Task HandleSubmit()
    {
        try
        {
            if (Expense.Category == "Custom" && string.IsNullOrEmpty(Expense.CustomCategory))
            {
                errorMessage = "Please provide a custom category name.";
                return;
            }

            await ExpenseService.AddTransaction(Expense);
            NavigationManager.NavigateTo("/dashboard"); // Redirect to dashboard after adding
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; // Display the error message if there is any exception
        }
    }

    private void NavigateDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

    private void SetType(string type) => Expense.Type = type;

    private void SaveCustomCategory()
    {
        if (!string.IsNullOrEmpty(Expense.CustomCategory) && !Categories.Contains(Expense.CustomCategory))
        {
            Categories.Add(Expense.CustomCategory); // Add the custom category to the list
            Expense.Category = Expense.CustomCategory; // Set the current category to the new custom one
            errorMessage = null; // Clear any error messages
        }
        else
        {
            errorMessage = "Invalid or duplicate custom category.";
        }
    }
}
