@page "/dashboard"
@using DataModel.Model
@inject IExpenseService ExpenseService
@inject NavigationManager NavigationManager
@inject IUserService UserService
@using MudBlazor


<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 bg-light p-4 vh-100" style="position: fixed; top: 0; left: 0; overflow-y: auto;">
            <h4 class="text-center mb-4">PocketPurge</h4>
            <ul class="list-unstyled">
                <li><button @onclick="NavigateToDashboard" class="btn btn-link text-dark w-100 text-start">Dashboard</button></li>
                <li><button @onclick="NavigateToTransaction" class="btn btn-link text-dark w-100 text-start">All Transactions</button></li>
                <li><button @onclick="NavigateToDebt" class="btn btn-link text-dark w-100 text-start">Debt</button></li>
                <li><button @onclick="Logout" class="btn btn-link text-dark w-100 text-start">Logout</button></li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 offset-md-3" style="padding-top: 20px;">
            <!-- Header Section -->
            <MudCard Class="mb-4">
                <MudCardContent Class="d-flex justify-content-between align-items-center">
                    <MudText Typo="Typo.h5">Expense Dashboard</MudText>
                    <div class="text-end">
                        <MudText Typo="Typo.h6" Class="mb-0">Current Balance</MudText>
                        <MudText Typo="Typo.h5" Color="Color.Primary" Class="fw-bold">
                            @(currentBalance.HasValue ? currentBalance.Value.ToString("C") : "N/A")
                        </MudText>
                    </div>
                </MudCardContent>
            </MudCard>

            <!-- Add Transaction Button -->
            <div class="text-center my-3">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" @onclick="NavigateToAddTransaction">
                    Add Transaction
                </MudButton>
            </div>

            <!-- Summary Cards -->
            <div class="row mb-4 text-center">
                <div class="col-md-6">
                    <MudCard Class="pa-4" Style="background-color: #f0f8ff; border-radius: 10px;">
                        <MudCardContent>
                            <h4 class="mud-title">Total Inflows</h4>
                            <p class="mud-typography text-success fw-bold">@TotalExpense.ToString("C")</p>
                        </MudCardContent>
                    </MudCard>
                </div>
                <div class="col-md-6">
                    <MudCard Class="pa-4" Style="background-color: #fff0f0; border-radius: 10px;">
                        <MudCardContent>
                            <h4 class="mud-title">Total Outflows</h4>
                            <p class="mud-typography text-danger fw-bold">@TotalOutflow.ToString("C")</p>
                        </MudCardContent>
                    </MudCard>
                </div>
            </div>

            <!-- Total Transactions -->
            <div class="row">
                <div class="col-md-4 mx-auto">
                    <MudCard Class="pa-4" Style="background-color: #f5f5f5; border-radius: 10px;">
                        <MudCardContent>
                            <h4 class="mud-title">Total Transactions</h4>
                            <p class="mud-typography fw-bold">@TotalTransactions</p>
                        </MudCardContent>
                    </MudCard>
                </div>
            </div>

            <!-- Category-Wise Chart -->
            <MudPaper Class="pa-4 mb-4 text-center">
                <MudChart ChartType="ChartType.Pie"
                          Width="200px"
                          Height="200px"
                          InputData="@CategoryExpenses.Values.Select(v => (double)v).ToArray()"
                          InputLabels="@CategoryExpenses.Keys.ToArray()"
                          DonutInnerRadius="40%"
                          DonutText="Expenses" />
            </MudPaper>

            <!-- Filter Dropdown -->
            <div class="mb-4">
                <label for="transactionFilter" class="form-label">Filter Transactions</label>
                <select id="transactionFilter" class="form-select" @onchange="OnFilterChanged">
                    <option value="Highest">Top 5 Highest Transactions</option>
                    <option value="Lowest">Top 5 Lowest Transactions</option>
                    <option value="Recent">Recent Transactions</option>
                </select>
            </div>

            <!-- Transaction Table -->
            <MudPaper Class="pa-4 mb-4">
                <MudText Typo="Typo.h5" Class="mb-3">@($"{TransactionFilter} Transactions")</MudText>
                <MudTable Items="FilteredTransactions" Bordered Striped Hover>
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Category</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Description</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">@context.title</MudTd>
                        <MudTd DataLabel="Type">@context.Type</MudTd>
                        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                        <MudTd DataLabel="Category">@context.Category</MudTd>
                        <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>

            <!-- Pending Debts -->
            <MudPaper Class="pa-4 mb-4 pe-5">
                <MudCard>
                    <MudCardHeader Class="bg-primary text-white">
                        <MudText Typo="Typo.h6" Class="mb-0">Pending Debts</MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        @if (debts == null)
                        {
                            <MudText Typo="Typo.body1" Color="Color.Primary"><em>Loading debts...</em></MudText>
                        }
                        else if (debts.Count == 0)
                        {
                            <MudText Typo="Typo.body1" Color="Color.Primary">No pending debts.</MudText>
                        }
                        else
                        {
                            <MudTable Items="debts" Bordered Striped Hover>
                                <HeaderContent>
                                    <MudTh>Title</MudTh>
                                    <MudTh>Source</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Due Date</MudTh>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="Title">@context.Title</MudTd>
                                    <MudTd DataLabel="Source">@context.Source</MudTd>
                                    <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                                    <MudTd DataLabel="Due Date">@context.DueDate.ToShortDateString()</MudTd>
                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                    <MudTd DataLabel="Actions">
                                        <MudButton Color="Color.Error" Size="Size.Small" OnClick="() => DeleteDebt(context.Id)">
                                            <MudIcon Icon="@Icons.Material.Filled.Delete" />
                                            Clear
                                        </MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        </div>
    </div>
</div>

  



@code {
    private List<Expense> Expenses { get; set; } = new();
    private decimal TotalExpense { get; set; }
    private decimal TotalOutflow { get; set; }
    private decimal? currentBalance { get; set; }
    private Dictionary<string, decimal> CategoryExpenses { get; set; } = new();
    private string errorMessage { get; set; }
    private List<DataModel.Model.Debt> debts = new List<DataModel.Model.Debt>();
    private int TotalTransactions { get; set; }

    private List<Expense> Top5HighestTransactions { get; set; } = new();
    private List<Expense> Top5LowestTransactions { get; set; } = new();
    private List<Expense> RecentTransactions { get; set; } = new();
    private List<Expense> FilteredTransactions { get; set; } = new();
    private string TransactionFilter { get; set; } = "Highest"; // Default filter to "Highest"

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            Expenses = await ExpenseService.GetAllTransaction();
            TotalExpense = await ExpenseService.GetTotalTransaction();
            TotalOutflow = await ExpenseService.GetTotalOutflows();
            CategoryExpenses = await ExpenseService.GetCategoryTransaction();
            currentBalance = await ExpenseService.GetCurrentBalance();
            debts = await ExpenseService.GetAllDebts();

            TotalTransactions = Expenses.Count;

            // Sorting transactions by amount
            var sortedExpenses = Expenses.OrderByDescending(e => e.Amount).ToList();
            Top5HighestTransactions = sortedExpenses.Take(5).ToList();
            Top5LowestTransactions = sortedExpenses.OrderBy(e => e.Amount).Take(5).ToList();

            // Sorting by date for recent transactions
            RecentTransactions = Expenses.OrderByDescending(e => e.Date).Take(5).ToList();

            // Initialize with the default filter
            ApplyTransactionFilter();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
        }
    }

    private void ApplyTransactionFilter()
    {
        if (TransactionFilter == "Highest")
        {
            FilteredTransactions = Top5HighestTransactions;
        }
        else if (TransactionFilter == "Lowest")
        {
            FilteredTransactions = Top5LowestTransactions;
        }
        else if (TransactionFilter == "Recent")
        {
            FilteredTransactions = RecentTransactions;
        }
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        TransactionFilter = e.Value.ToString();
        ApplyTransactionFilter();
    }

    private void NavigateToAddTransaction()
    {
        NavigationManager.NavigateTo("/add-transaction");
    }

    private void NavigateToTransaction()
    {
        NavigationManager.NavigateTo("/transaction");
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

    private void NavigateToDebt()
    {
        NavigationManager.NavigateTo("/debts");
    }

    private void Logout()
    {
        UserService.Logout();
        NavigationManager.NavigateTo("/login");
    }

    private async Task DeleteDebt(int id)
    {
        // Find the debt to delete based on the provided ID
        var debtToDelete = debts.FirstOrDefault(d => d.Id == id);

        if (debtToDelete != null)
        {
            // Check if the current balance is sufficient to clear the debt
            if (currentBalance.HasValue && debtToDelete.Amount > currentBalance.Value)
            {
                // Display an error message if the balance is insufficient
                errorMessage = "Insufficient balance to clear this debt.";
            }
            else
            {
                // If sufficient balance exists, proceed with debt clearance
                await ExpenseService.DeleteDebt(debtToDelete); // Call the service to clear the debt
                debts.Remove(debtToDelete); // Remove the debt from the list
                currentBalance = await ExpenseService.GetCurrentBalance(); // Update the current balance
                errorMessage = null; // Clear any previous error messages
            }
        }
        else
        {
            // Display an error if the debt with the given ID doesn't exist
            errorMessage = "Debt not found.";
        }
    }
  

}